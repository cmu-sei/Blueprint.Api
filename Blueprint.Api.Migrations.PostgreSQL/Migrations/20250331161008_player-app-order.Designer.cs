/*
 Copyright 2025 Carnegie Mellon University. All Rights Reserved. 
 Released under a MIT (SEI)-style license. See LICENSE.md in the project root for license information.
*/

ï»¿// <auto-generated />
using System;
using Blueprint.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Blueprint.Api.Migrations.PostgreSQL.Migrations
{
    [DbContext(typeof(BlueprintContext))]
    [Migration("20250331161008_player-app-order")]
    partial class playerapporder
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Blueprint.Api.Data.Models.CardEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("GalleryId")
                        .HasColumnType("uuid")
                        .HasColumnName("gallery_id");

                    b.Property<int>("Inject")
                        .HasColumnType("integer")
                        .HasColumnName("inject");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_template");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<int>("Move")
                        .HasColumnType("integer")
                        .HasColumnName("move");

                    b.Property<Guid?>("MselId")
                        .HasColumnType("uuid")
                        .HasColumnName("msel_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("MselId");

                    b.ToTable("cards");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.CardTeamEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("CanPostArticles")
                        .HasColumnType("boolean")
                        .HasColumnName("can_post_articles");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uuid")
                        .HasColumnName("card_id");

                    b.Property<bool>("IsShownOnWall")
                        .HasColumnType("boolean")
                        .HasColumnName("is_shown_on_wall");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("TeamId", "CardId")
                        .IsUnique();

                    b.ToTable("card_teams");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.CatalogEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("InjectTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("inject_type_id");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<string>("ListDataFields")
                        .HasColumnType("text")
                        .HasColumnName("list_data_fields");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.HasKey("Id");

                    b.HasIndex("InjectTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("catalogs");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.CatalogInjectEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CatalogId")
                        .HasColumnType("uuid")
                        .HasColumnName("catalog_id");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("display_order");

                    b.Property<Guid>("InjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("inject_id");

                    b.Property<bool>("IsNew")
                        .HasColumnType("boolean")
                        .HasColumnName("is_new");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.HasIndex("InjectId", "CatalogId")
                        .IsUnique();

                    b.ToTable("catalog_injects");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.CatalogUnitEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CatalogId")
                        .HasColumnType("uuid")
                        .HasColumnName("catalog_id");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uuid")
                        .HasColumnName("unit_id");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.HasIndex("UnitId", "CatalogId")
                        .IsUnique();

                    b.ToTable("catalog_units");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.CiteActionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("ActionNumber")
                        .HasColumnType("integer")
                        .HasColumnName("action_number");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("InjectNumber")
                        .HasColumnType("integer")
                        .HasColumnName("inject_number");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_template");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<int>("MoveNumber")
                        .HasColumnType("integer")
                        .HasColumnName("move_number");

                    b.Property<Guid?>("MselId")
                        .HasColumnType("uuid")
                        .HasColumnName("msel_id");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.HasKey("Id");

                    b.HasIndex("MselId");

                    b.HasIndex("TeamId");

                    b.ToTable("cite_actions");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.CiteRoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_template");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<Guid?>("MselId")
                        .HasColumnType("uuid")
                        .HasColumnName("msel_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.HasKey("Id");

                    b.HasIndex("MselId");

                    b.HasIndex("TeamId");

                    b.ToTable("cite_roles");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.DataFieldEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("CellMetadata")
                        .HasColumnType("text")
                        .HasColumnName("cell_metadata");

                    b.Property<string>("ColumnMetadata")
                        .HasColumnType("text")
                        .HasColumnName("column_metadata");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<int>("DataType")
                        .HasColumnType("integer")
                        .HasColumnName("data_type");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("display_order");

                    b.Property<string>("GalleryArticleParameter")
                        .HasColumnType("text")
                        .HasColumnName("gallery_article_parameter");

                    b.Property<Guid?>("InjectTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("inject_type_id");

                    b.Property<bool>("IsChosenFromList")
                        .HasColumnType("boolean")
                        .HasColumnName("is_chosen_from_list");

                    b.Property<bool>("IsFacilitationField")
                        .HasColumnType("boolean")
                        .HasColumnName("is_facilitation_field");

                    b.Property<bool>("IsInformationField")
                        .HasColumnType("boolean")
                        .HasColumnName("is_information_field");

                    b.Property<bool>("IsMultiSelect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_multi_select");

                    b.Property<bool>("IsOnlyShownToOwners")
                        .HasColumnType("boolean")
                        .HasColumnName("is_only_shown_to_owners");

                    b.Property<bool>("IsShownOnDefaultTab")
                        .HasColumnType("boolean")
                        .HasColumnName("is_shown_on_default_tab");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_template");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<Guid?>("MselId")
                        .HasColumnType("uuid")
                        .HasColumnName("msel_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("OnExerciseView")
                        .HasColumnType("boolean")
                        .HasColumnName("on_exercise_view");

                    b.Property<bool>("OnScenarioEventList")
                        .HasColumnType("boolean")
                        .HasColumnName("on_scenario_event_list");

                    b.HasKey("Id");

                    b.HasIndex("InjectTypeId");

                    b.HasIndex("MselId");

                    b.ToTable("data_fields", t =>
                        {
                            t.HasCheckConstraint("data_field_msel_or_inject_type", "msel_id IS NULL OR inject_type_id IS NULL");
                        });
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.DataOptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("DataFieldId")
                        .HasColumnType("uuid")
                        .HasColumnName("data_field_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("display_order");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("OptionName")
                        .HasColumnType("text")
                        .HasColumnName("option_name");

                    b.Property<string>("OptionValue")
                        .HasColumnType("text")
                        .HasColumnName("option_value");

                    b.HasKey("Id");

                    b.HasIndex("DataFieldId");

                    b.ToTable("data_options");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.DataValueEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("CellMetadata")
                        .HasColumnType("text")
                        .HasColumnName("cell_metadata");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("DataFieldId")
                        .HasColumnType("uuid")
                        .HasColumnName("data_field_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<Guid?>("InjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("inject_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<Guid?>("ScenarioEventId")
                        .HasColumnType("uuid")
                        .HasColumnName("scenario_event_id");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("DataFieldId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("InjectId");

                    b.HasIndex("ScenarioEventId", "InjectId", "DataFieldId")
                        .IsUnique();

                    b.ToTable("data_values", t =>
                        {
                            t.HasCheckConstraint("data_value_scenario_event_or_inject", "(scenario_event_id IS NOT NULL AND inject_id IS NULL) OR (scenario_event_id IS NULL AND inject_id IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.InjectEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("InjectTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("inject_type_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("RequiresInjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("requires_inject_id");

                    b.HasKey("Id");

                    b.HasIndex("InjectTypeId");

                    b.HasIndex("RequiresInjectId");

                    b.ToTable("injects");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.InjectTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("inject_types");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.InvitationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("EmailDomain")
                        .HasColumnType("text")
                        .HasColumnName("email_domain");

                    b.Property<DateTime?>("ExpirationDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_date_time");

                    b.Property<bool>("IsTeamLeader")
                        .HasColumnType("boolean")
                        .HasColumnName("is_team_leader");

                    b.Property<int>("MaxUsersAllowed")
                        .HasColumnType("integer")
                        .HasColumnName("max_users_allowed");

                    b.Property<Guid>("MselId")
                        .HasColumnType("uuid")
                        .HasColumnName("msel_id");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<int>("UserCount")
                        .HasColumnType("integer")
                        .HasColumnName("user_count");

                    b.Property<bool>("WasDeactivated")
                        .HasColumnType("boolean")
                        .HasColumnName("was_deactivated");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("MselId");

                    b.HasIndex("TeamId");

                    b.ToTable("invitations");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.MoveEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<int>("DeltaSeconds")
                        .HasColumnType("integer")
                        .HasColumnName("delta_seconds");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<int>("MoveNumber")
                        .HasColumnType("integer")
                        .HasColumnName("move_number");

                    b.Property<DateTime?>("MoveStartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("move_start_time");

                    b.Property<Guid>("MselId")
                        .HasColumnType("uuid")
                        .HasColumnName("msel_id");

                    b.Property<string>("SituationDescription")
                        .HasColumnType("text")
                        .HasColumnName("situation_description");

                    b.Property<DateTime?>("SituationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("situation_time");

                    b.HasKey("Id");

                    b.HasIndex("MselId", "MoveNumber")
                        .IsUnique();

                    b.ToTable("moves");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.MselEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("CiteEvaluationId")
                        .HasColumnType("uuid")
                        .HasColumnName("cite_evaluation_id");

                    b.Property<int>("CiteIntegrationType")
                        .HasColumnType("integer")
                        .HasColumnName("cite_integration_type");

                    b.Property<Guid?>("CiteScoringModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("cite_scoring_model_id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DurationSeconds")
                        .HasColumnType("integer")
                        .HasColumnName("duration_seconds");

                    b.Property<Guid?>("GalleryCollectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("gallery_collection_id");

                    b.Property<Guid?>("GalleryExhibitId")
                        .HasColumnType("uuid")
                        .HasColumnName("gallery_exhibit_id");

                    b.Property<int>("GalleryIntegrationType")
                        .HasColumnType("integer")
                        .HasColumnName("gallery_integration_type");

                    b.Property<string>("HeaderRowMetadata")
                        .HasColumnType("text")
                        .HasColumnName("header_row_metadata");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_template");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("PlayerIntegrationType")
                        .HasColumnType("integer")
                        .HasColumnName("player_integration_type");

                    b.Property<Guid?>("PlayerViewId")
                        .HasColumnType("uuid")
                        .HasColumnName("player_view_id");

                    b.Property<bool>("ShowGroupOnExerciseView")
                        .HasColumnType("boolean")
                        .HasColumnName("show_group_on_exercise_view");

                    b.Property<bool>("ShowGroupOnScenarioEventList")
                        .HasColumnType("boolean")
                        .HasColumnName("show_group_on_scenario_event_list");

                    b.Property<bool>("ShowMoveOnExerciseView")
                        .HasColumnType("boolean")
                        .HasColumnName("show_move_on_exercise_view");

                    b.Property<bool>("ShowMoveOnScenarioEventList")
                        .HasColumnType("boolean")
                        .HasColumnName("show_move_on_scenario_event_list");

                    b.Property<bool>("ShowTimeOnExerciseView")
                        .HasColumnType("boolean")
                        .HasColumnName("show_time_on_exercise_view");

                    b.Property<bool>("ShowTimeOnScenarioEventList")
                        .HasColumnType("boolean")
                        .HasColumnName("show_time_on_scenario_event_list");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("SteamfitterIntegrationType")
                        .HasColumnType("integer")
                        .HasColumnName("steamfitter_integration_type");

                    b.Property<Guid?>("SteamfitterScenarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("steamfitter_scenario_id");

                    b.Property<bool>("UseCite")
                        .HasColumnType("boolean")
                        .HasColumnName("use_cite");

                    b.Property<bool>("UseGallery")
                        .HasColumnType("boolean")
                        .HasColumnName("use_gallery");

                    b.Property<bool>("UsePlayer")
                        .HasColumnType("boolean")
                        .HasColumnName("use_player");

                    b.Property<bool>("UseSteamfitter")
                        .HasColumnType("boolean")
                        .HasColumnName("use_steamfitter");

                    b.HasKey("Id");

                    b.ToTable("msels");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.MselPageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("AllCanView")
                        .HasColumnType("boolean")
                        .HasColumnName("all_can_view");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid>("MselId")
                        .HasColumnType("uuid")
                        .HasColumnName("msel_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("MselId");

                    b.ToTable("msel_pages");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.MselTeamEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("CiteTeamTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("cite_team_type_id");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<Guid>("MselId")
                        .HasColumnType("uuid")
                        .HasColumnName("msel_id");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.HasKey("Id");

                    b.HasIndex("MselId");

                    b.HasIndex("TeamId", "MselId")
                        .IsUnique();

                    b.ToTable("msel_teams");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.MselUnitEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("MselId")
                        .HasColumnType("uuid")
                        .HasColumnName("msel_id");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uuid")
                        .HasColumnName("unit_id");

                    b.HasKey("Id");

                    b.HasIndex("MselId");

                    b.HasIndex("UnitId", "MselId")
                        .IsUnique();

                    b.ToTable("msel_units");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.OrganizationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_template");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<Guid?>("MselId")
                        .HasColumnType("uuid")
                        .HasColumnName("msel_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.HasKey("Id");

                    b.HasIndex("MselId");

                    b.ToTable("organizations");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.PermissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<bool>("ReadOnly")
                        .HasColumnType("boolean")
                        .HasColumnName("read_only");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("Key", "Value")
                        .IsUnique();

                    b.ToTable("permissions");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.PlayerApplicationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<bool?>("Embeddable")
                        .HasColumnType("boolean")
                        .HasColumnName("embeddable");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<bool?>("LoadInBackground")
                        .HasColumnType("boolean")
                        .HasColumnName("load_in_background");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<Guid>("MselId")
                        .HasColumnType("uuid")
                        .HasColumnName("msel_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("MselId");

                    b.ToTable("player_applications");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.PlayerApplicationTeamEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("display_order");

                    b.Property<Guid>("PlayerApplicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("player_application_id");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.HasKey("Id");

                    b.HasIndex("PlayerApplicationId");

                    b.HasIndex("TeamId", "PlayerApplicationId")
                        .IsUnique();

                    b.ToTable("player_application_teams");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.ScenarioEventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<int>("DeltaSeconds")
                        .HasColumnType("integer")
                        .HasColumnName("delta_seconds");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("GroupOrder")
                        .HasColumnType("integer")
                        .HasColumnName("group_order");

                    b.Property<Guid?>("InjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("inject_id");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean")
                        .HasColumnName("is_hidden");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<Guid>("MselId")
                        .HasColumnType("uuid")
                        .HasColumnName("msel_id");

                    b.Property<string>("RowMetadata")
                        .HasColumnType("text")
                        .HasColumnName("row_metadata");

                    b.Property<int>("ScenarioEventType")
                        .HasColumnType("integer")
                        .HasColumnName("scenario_event_type");

                    b.HasKey("Id");

                    b.HasIndex("InjectId");

                    b.HasIndex("MselId");

                    b.ToTable("scenario_events");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.TeamEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("CiteTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("cite_team_id");

                    b.Property<Guid?>("CiteTeamTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("cite_team_type_id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<Guid?>("GalleryTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("gallery_team_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<Guid>("MselId")
                        .HasColumnType("uuid")
                        .HasColumnName("msel_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("PlayerTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("player_team_id");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.Property<bool>("canTeamLeaderInvite")
                        .HasColumnType("boolean")
                        .HasColumnName("can_team_leader_invite");

                    b.Property<bool>("canTeamMemberInvite")
                        .HasColumnType("boolean")
                        .HasColumnName("can_team_member_invite");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("MselId");

                    b.ToTable("teams");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.TeamUserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId", "TeamId")
                        .IsUnique();

                    b.ToTable("team_users");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.UnitEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("units");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.UnitUserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uuid")
                        .HasColumnName("unit_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.HasIndex("UserId", "UnitId")
                        .IsUnique();

                    b.ToTable("unit_users");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.UserMselRoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<Guid>("MselId")
                        .HasColumnType("uuid")
                        .HasColumnName("msel_id");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("MselId", "UserId", "Role")
                        .IsUnique();

                    b.ToTable("user_msel_roles");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.UserPermissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid")
                        .HasColumnName("permission_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId", "PermissionId")
                        .IsUnique();

                    b.ToTable("user_permissions");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.UserTeamRoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TeamId", "UserId", "Role")
                        .IsUnique();

                    b.ToTable("user_team_roles");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.CardEntity", b =>
                {
                    b.HasOne("Blueprint.Api.Data.Models.MselEntity", "Msel")
                        .WithMany("Cards")
                        .HasForeignKey("MselId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Msel");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.CardTeamEntity", b =>
                {
                    b.HasOne("Blueprint.Api.Data.Models.CardEntity", "Card")
                        .WithMany("CardTeams")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blueprint.Api.Data.Models.TeamEntity", "Team")
                        .WithMany("CardTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.CatalogEntity", b =>
                {
                    b.HasOne("Blueprint.Api.Data.Models.InjectTypeEntity", "InjectType")
                        .WithMany()
                        .HasForeignKey("InjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blueprint.Api.Data.Models.CatalogEntity", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("InjectType");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.CatalogInjectEntity", b =>
                {
                    b.HasOne("Blueprint.Api.Data.Models.CatalogEntity", "Catalog")
                        .WithMany("CatalogInjects")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blueprint.Api.Data.Models.InjectEntity", "Inject")
                        .WithMany("CatalogInjects")
                        .HasForeignKey("InjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catalog");

                    b.Navigation("Inject");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.CatalogUnitEntity", b =>
                {
                    b.HasOne("Blueprint.Api.Data.Models.CatalogEntity", "Catalog")
                        .WithMany("CatalogUnits")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blueprint.Api.Data.Models.UnitEntity", "Unit")
                        .WithMany("CatalogUnits")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catalog");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.CiteActionEntity", b =>
                {
                    b.HasOne("Blueprint.Api.Data.Models.MselEntity", "Msel")
                        .WithMany("CiteActions")
                        .HasForeignKey("MselId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Blueprint.Api.Data.Models.TeamEntity", "Team")
                        .WithMany("CiteActions")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Msel");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.CiteRoleEntity", b =>
                {
                    b.HasOne("Blueprint.Api.Data.Models.MselEntity", "Msel")
                        .WithMany("CiteRoles")
                        .HasForeignKey("MselId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Blueprint.Api.Data.Models.TeamEntity", "Team")
                        .WithMany("CiteRoles")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Msel");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.DataFieldEntity", b =>
                {
                    b.HasOne("Blueprint.Api.Data.Models.InjectTypeEntity", "InjectType")
                        .WithMany("DataFields")
                        .HasForeignKey("InjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Blueprint.Api.Data.Models.MselEntity", "Msel")
                        .WithMany("DataFields")
                        .HasForeignKey("MselId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("InjectType");

                    b.Navigation("Msel");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.DataOptionEntity", b =>
                {
                    b.HasOne("Blueprint.Api.Data.Models.DataFieldEntity", "DataField")
                        .WithMany("DataOptions")
                        .HasForeignKey("DataFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataField");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.DataValueEntity", b =>
                {
                    b.HasOne("Blueprint.Api.Data.Models.DataFieldEntity", "DataField")
                        .WithMany()
                        .HasForeignKey("DataFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blueprint.Api.Data.Models.InjectEntity", "Inject")
                        .WithMany("DataValues")
                        .HasForeignKey("InjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Blueprint.Api.Data.Models.ScenarioEventEntity", "ScenarioEvent")
                        .WithMany("DataValues")
                        .HasForeignKey("ScenarioEventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("DataField");

                    b.Navigation("Inject");

                    b.Navigation("ScenarioEvent");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.InjectEntity", b =>
                {
                    b.HasOne("Blueprint.Api.Data.Models.InjectTypeEntity", "InjectType")
                        .WithMany()
                        .HasForeignKey("InjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blueprint.Api.Data.Models.InjectEntity", "RequiresInject")
                        .WithMany()
                        .HasForeignKey("RequiresInjectId");

                    b.Navigation("InjectType");

                    b.Navigation("RequiresInject");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.InvitationEntity", b =>
                {
                    b.HasOne("Blueprint.Api.Data.Models.MselEntity", "Msel")
                        .WithMany("Invitations")
                        .HasForeignKey("MselId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blueprint.Api.Data.Models.TeamEntity", "Team")
                        .WithMany("Invitations")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Msel");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.MoveEntity", b =>
                {
                    b.HasOne("Blueprint.Api.Data.Models.MselEntity", "Msel")
                        .WithMany("Moves")
                        .HasForeignKey("MselId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Msel");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.MselPageEntity", b =>
                {
                    b.HasOne("Blueprint.Api.Data.Models.MselEntity", "Msel")
                        .WithMany("Pages")
                        .HasForeignKey("MselId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Msel");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.MselTeamEntity", b =>
                {
                    b.HasOne("Blueprint.Api.Data.Models.MselEntity", "Msel")
                        .WithMany()
                        .HasForeignKey("MselId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blueprint.Api.Data.Models.TeamEntity", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Msel");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.MselUnitEntity", b =>
                {
                    b.HasOne("Blueprint.Api.Data.Models.MselEntity", "Msel")
                        .WithMany("MselUnits")
                        .HasForeignKey("MselId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blueprint.Api.Data.Models.UnitEntity", "Unit")
                        .WithMany("MselUnits")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Msel");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.OrganizationEntity", b =>
                {
                    b.HasOne("Blueprint.Api.Data.Models.MselEntity", "Msel")
                        .WithMany("Organizations")
                        .HasForeignKey("MselId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Msel");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.PlayerApplicationEntity", b =>
                {
                    b.HasOne("Blueprint.Api.Data.Models.MselEntity", "Msel")
                        .WithMany("PlayerApplications")
                        .HasForeignKey("MselId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Msel");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.PlayerApplicationTeamEntity", b =>
                {
                    b.HasOne("Blueprint.Api.Data.Models.PlayerApplicationEntity", "PlayerApplication")
                        .WithMany("PlayerApplicationTeams")
                        .HasForeignKey("PlayerApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blueprint.Api.Data.Models.TeamEntity", "Team")
                        .WithMany("PlayerApplicationTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerApplication");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.ScenarioEventEntity", b =>
                {
                    b.HasOne("Blueprint.Api.Data.Models.InjectEntity", "Inject")
                        .WithMany()
                        .HasForeignKey("InjectId");

                    b.HasOne("Blueprint.Api.Data.Models.MselEntity", "Msel")
                        .WithMany("ScenarioEvents")
                        .HasForeignKey("MselId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inject");

                    b.Navigation("Msel");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.TeamEntity", b =>
                {
                    b.HasOne("Blueprint.Api.Data.Models.MselEntity", "Msel")
                        .WithMany("Teams")
                        .HasForeignKey("MselId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Msel");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.TeamUserEntity", b =>
                {
                    b.HasOne("Blueprint.Api.Data.Models.TeamEntity", "Team")
                        .WithMany("TeamUsers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blueprint.Api.Data.Models.UserEntity", "User")
                        .WithMany("TeamUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.UnitUserEntity", b =>
                {
                    b.HasOne("Blueprint.Api.Data.Models.UnitEntity", "Unit")
                        .WithMany("UnitUsers")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blueprint.Api.Data.Models.UserEntity", "User")
                        .WithMany("UnitUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.UserMselRoleEntity", b =>
                {
                    b.HasOne("Blueprint.Api.Data.Models.MselEntity", "Msel")
                        .WithMany("UserMselRoles")
                        .HasForeignKey("MselId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blueprint.Api.Data.Models.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Msel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.UserPermissionEntity", b =>
                {
                    b.HasOne("Blueprint.Api.Data.Models.PermissionEntity", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blueprint.Api.Data.Models.UserEntity", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.UserTeamRoleEntity", b =>
                {
                    b.HasOne("Blueprint.Api.Data.Models.TeamEntity", "Team")
                        .WithMany("UserTeamRoles")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blueprint.Api.Data.Models.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.CardEntity", b =>
                {
                    b.Navigation("CardTeams");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.CatalogEntity", b =>
                {
                    b.Navigation("CatalogInjects");

                    b.Navigation("CatalogUnits");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.DataFieldEntity", b =>
                {
                    b.Navigation("DataOptions");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.InjectEntity", b =>
                {
                    b.Navigation("CatalogInjects");

                    b.Navigation("DataValues");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.InjectTypeEntity", b =>
                {
                    b.Navigation("DataFields");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.MselEntity", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("CiteActions");

                    b.Navigation("CiteRoles");

                    b.Navigation("DataFields");

                    b.Navigation("Invitations");

                    b.Navigation("Moves");

                    b.Navigation("MselUnits");

                    b.Navigation("Organizations");

                    b.Navigation("Pages");

                    b.Navigation("PlayerApplications");

                    b.Navigation("ScenarioEvents");

                    b.Navigation("Teams");

                    b.Navigation("UserMselRoles");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.PermissionEntity", b =>
                {
                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.PlayerApplicationEntity", b =>
                {
                    b.Navigation("PlayerApplicationTeams");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.ScenarioEventEntity", b =>
                {
                    b.Navigation("DataValues");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.TeamEntity", b =>
                {
                    b.Navigation("CardTeams");

                    b.Navigation("CiteActions");

                    b.Navigation("CiteRoles");

                    b.Navigation("Invitations");

                    b.Navigation("PlayerApplicationTeams");

                    b.Navigation("TeamUsers");

                    b.Navigation("UserTeamRoles");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.UnitEntity", b =>
                {
                    b.Navigation("CatalogUnits");

                    b.Navigation("MselUnits");

                    b.Navigation("UnitUsers");
                });

            modelBuilder.Entity("Blueprint.Api.Data.Models.UserEntity", b =>
                {
                    b.Navigation("TeamUsers");

                    b.Navigation("UnitUsers");

                    b.Navigation("UserPermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
